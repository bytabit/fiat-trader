/*
 * Copyright 2016 Steven Myers
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()

        // for gitsemver plugin
        maven {
            url "http://dl.bintray.com/palantir/releases"
        }

        // for ospackage and bintray plugin
        jcenter()
    }
    dependencies {
        classpath 'com.palantir:gradle-gitsemver:0.6.0'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.5.0'
        classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.4.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}

apply plugin: 'scala'
apply plugin: 'gitsemver'
apply plugin: 'idea'
apply plugin: 'nebula.ospackage'
apply plugin: 'javafx-gradle-plugin'
apply plugin: 'com.jfrog.bintray'

version semverVersion()

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets.main.scala.srcDirs = ["src/main/java", "src/main/scala"]
sourceSets.main.java.srcDirs = []

sourceSets.test.scala.srcDirs = ["src/test/java", "src/test/scala"]
sourceSets.test.java.srcDirs = []

sourceSets.main.resources {
    srcDirs = ['src/main/resources', 'src/main/java']
    exclude '**/*.java'
}

def scalaVersion = "2.11"
def akkaVersion = "2.4.1"
def akkaStreamVersion = "2.0.1"

dependencies {
    compile "org.scala-lang:scala-library:$scalaVersion.7"
    compile "com.typesafe.akka:akka-actor_$scalaVersion:$akkaVersion"
    compile "com.typesafe.akka:akka-slf4j_$scalaVersion:$akkaVersion"
    compile "com.typesafe.akka:akka-persistence_$scalaVersion:$akkaVersion"
    compile "org.iq80.leveldb:leveldb:0.7"
    compile "org.fusesource.leveldbjni:leveldbjni-all:1.8"
    compile "com.typesafe.akka:akka-http-experimental_$scalaVersion:$akkaStreamVersion"
    compile "com.typesafe.akka:akka-http-spray-json-experimental_$scalaVersion:$akkaStreamVersion"
    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "joda-time:joda-time:2.9.1"
    compile "org.joda:joda-convert:1.8"
    compile "org.joda:joda-money:0.10.0"
    compile "org.bitcoinj:bitcoinj-core:0.13.3"
    compile "com.madgag.spongycastle:prov:1.51.0.0"
    compile "net.glxn:qrgen:1.3"
    testCompile "org.scalatest:scalatest_$scalaVersion:2.2.1"
    testCompile "org.scalacheck:scalacheck_$scalaVersion:1.12.2"
}

task createVersionConf(dependsOn: processResources) << {
    def semver = semverVersion().toString()
    println "Create version.conf file, version = \"$semver\"."
    new File("$buildDir/resources/main/version.conf").withWriter { w ->
        w.write("bytabit.fiat-trader {\n  version = \"$semver\"\n}\n")
    }
}

compileScala {
    dependsOn createVersionConf
}

task run(type: JavaExec, dependsOn: classes) {
    main = 'org.bytabit.ft.fxui.FiatTrader'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    systemProperties System.properties
}

task server(type: JavaExec, dependsOn: classes) {
    main = 'org.bytabit.ft.server.Main'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
    systemProperties System.properties
}

task spec(dependsOn: ['testClasses'], type: JavaExec) {
    main 'org.scalatest.tools.Runner'
    args = ['-R', 'build/classes/test', '-o']
    classpath sourceSets.test.runtimeClasspath
}

buildDeb {
    packageName = 'fiat-trader-server'
    release '1'
    packageDescription 'Bytabit fiat trader event server'
    packager 'Steve Myers <steve@bytabit.org>'
    maintainer 'Steve Myers <steve@bytabit.org>'
    url 'https://bytabit.org'
    requires('ntp')
    requires('adduser')

    preInstall file('package/debian/preInstall.sh')
    postInstall file('package/debian/postInstall.sh')
    preUninstall file('package/debian/preUninstall.sh')
    postUninstall file('package/debian/postUninstall.sh')

    into '/opt/bytabit/fiat-trader'

    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.runtime) {
        into 'lib'
    }
    from('package/debian/run.sh') {
        into 'server'
        fileMode 0550
    }
    from('package/debian/default.conf') {
        fileType CONFIG | NOREPLACE
        into 'server'
    }
    from('package/debian/logback.xml') {
        fileType CONFIG | NOREPLACE
        into 'server'
    }
}

// configure javafx-gradle-plugin
jfx {
    verbose = true
    mainClass = "org.bytabit.ft.fxui.FiatTrader"
    jfxAppOutputDir = "build/jfx/app"
    jfxMainAppJarName = "fiat-trader-jfx.jar"
    deployDir = "src/main/deploy"

    // gradle jfxJar
    css2bin = false
    preLoader = null
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true

    // gradle jfxNative
    identifier = null // setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "Bytabit AB"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = null // Map<String, String>
    jvmArgs = null // List<String>
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = semverVersion().toString()
    needShortcut = false
    needMenu = false
//    bundleArguments = [
//            // dont bundle JRE (not recommended, but increases build-size/-speed)
//            runtime: null
//    ]
    appName = "Fiat Trader" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/windows/project.ico"
    additionalAppResources = // path to some additional resources when creating application-bundle
    secondaryLaunchers = //[[appName:"somethingDifferent"], [appName:"somethingDifferent2"]]
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    filesSpec {
        from ('build/jfx/native') {
            include '**/*.dmg'
            include '**/*.exe'
            include '**/*.deb'
        }
        into '.'
    }

    pkg {
        repo = 'generic'
        name = 'fiat-trader'
        userOrg = 'bytabit'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://bitbucket.org/bytabit/fiat-trader'
        publish = true
        version {
            name = semverVersion().toString()
            released = new Date()
            vcsTag = semverVersion().tagName
        }
    }
}
