include "version"

bytabit.fiat-trader {
  configName = "testnet"

  wallet {
    net = "org.bitcoin.test"
    dir = ${bytabit.fiat-trader.config}/wallet
  }

  arbitrator {

    enabled = false

    bond-percent = 0.20
    btc-arbitrator-fee = 0.10
  }

  server {

    enabled = false

    local-address = "0.0.0.0"
    local-port = 9000
    local-protocol = "http"

    public-address = "localhost"
    public-port = 9000
    public-protocol = "http"
  }
}

akka {

  log-dead-letters-during-shutdown = false

  actor {

    dsl.inbox = 2000

    serializers {
      serverManagerJson = "org.bytabit.ft.server.EventServerJsonSerializer"
      clientManagerJson = "org.bytabit.ft.client.ClientManagerJsonSerializer"
      clientJson = "org.bytabit.ft.client.EventClientJsonSerializer"
      tradeJson = "org.bytabit.ft.trade.TradeJsonSerializer"
      arbitratorJson = "org.bytabit.ft.arbitrator.ArbitratorJsonSerializer"
      stateChangeJson = "akka.persistence.fsm.StateChangeJsonSerializer"
    }

    serialization-bindings {
      "org.bytabit.ft.server.EventServer$Event" = serverManagerJson
      "org.bytabit.ft.client.ClientManager$Event" = clientManagerJson
      "org.bytabit.ft.client.EventClient$Event" = clientJson
      "org.bytabit.ft.trade.TradeProcess$Event" = tradeJson
      "org.bytabit.ft.arbitrator.ArbitratorManager$Event" = arbitratorJson
      "akka.persistence.fsm.PersistentFSM$StateChangeEvent" = stateChangeJson

      "java.io.Serializable" = none // because it is a bad default
    }

    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
  }

  persistence {
    snapshot-store {
      local.dir = ${bytabit.fiat-trader.config}/snapshots
      plugin = "akka.persistence.snapshot-store.local"
    }

    journal {
      leveldb.dir = ${bytabit.fiat-trader.config}/journal
      plugin = "akka.persistence.journal.leveldb"
    }

    view {
      auto-update-interval = 2s
    }

  }
}
